$01_class 패키지 안에 Account 클래스 생성하기

1. 변수 생성
	1-1. 현재 객체에서만 접근가능하며 '계좌번호'를 문자형 type으로 가지는 accountNum 변수
	1-2. 현재 객체에서만 접근가능하며 '계좌잔액'을 실수형 type으로 가지는 balance 변수
	1-3. 현재 객체에서만 접근가능하며 '고객 정보'를 Customer 객체 type으로 가지는 customer 변수

2. 생성자 생성
	계좌번호와 잔액을 매개변수로 가지며, 매개변수로 받은 값으로 멤버변수를 초기화하는 생성자 생성

3. 메서드 생성
	3-1. 입금하는 메서드
		amount(입금할 금액)을 파라미터로 가지는 deposite 메서드 생성 및 메서드 기능 구현

	3-2. 출금하는 메서드
		amount(출금할 금액)를 파라미터로 가지는 withdraw 메서드 생성 및 메서드 기능 구현
		잔고 부족시 "잔고부족" 출력하기

	3-3. get-set 메서드
		3-3-1. 고객 객체 getter & setter
		3-3-2. 계좌 번호 getter & setter
		3-3-3. 잔액 getter & setter



※ Getter, Setter
일반적으로 프로그래밍 시, 객체들의 데이터를 외부에서 <<직접적>>으로 접근하는 것을 막는다.

데이터들을 접근 제한자로 막아두고,
각 데이터들을 getter, setter로 접근하는 방식을 사용한다. 

예를 들어 Human이라는 클래스에 weight(몸무게) 데이터가 존재할 때
weight는 0보다 작을 수 없다.

그러나 외부에서 직접적으로 값을 줄 때, -100이라는 값을 주는 경우가 있을 수 있다.
이러한 경우 객체의 무결성이 깨진다. (무결성 : 객체에 결함이 없어야 한다.)

무결성이 깨지는 것을 방지하기 위해
데이터 필드를 private로 만들어 외부에서의 접근을 제한한 다음

Setter를 사용하여 파라미터로 전달받은 값을 내부에서 데이터 필드에 넣어주는 방식을 사용하고,
Getter를 사용하여 데이터 필드의 값을 숨긴 채 내부에서 가공한 값을 반환할 수 있다.